# -*- mode: snippet -*-
# name: SA-IS
# key: /sais
# group: StringAlgorithms
# --

template<class T>
void induced_sort(T &vec, int max_size, vector<int> &cnt, vector<int> &sa, vector<char> &ls, vector<int> &lms, vector<int> &l, vector<int> &r){
    const int n = vec.size();
    fill(sa.begin(), sa.end(), -1);
    for(int i = 0;i < max_size;i++){
        l[i] = (i?cnt[i-1]:0);
        r[i] = cnt[i];
    }
    //LMS
    for(int i = lms.size()-1;i >= 0;i--){
        int ind = lms[i];
        sa[--r[vec[ind]]] = ind;
    }
    //L
    for(int i = 0;i < n;i++){
        if(sa[i] <= 0)continue;
        int nxt = sa[i]-1;
        if(ls[nxt] == 's')continue;
        sa[l[vec[nxt]]++] = nxt;
    }
    for(int i = 0;i < max_size;i++)r[i] = cnt[i];
    //S
    for(int i = n-1;i >= 0;i--){
        if(sa[i] <= 0)continue;
        int nxt = sa[i]-1;
        if(ls[nxt] == 'l')continue;
        sa[--r[vec[nxt]]] = nxt;
    }
}

//Don't forget to add UNIQUE lixicographically smallest element at the end!
template<class T>
vector<int> suffix_array(T &vec, int max_size = 256){
    if(vec.size() == 1)return {0};
    const int n = vec.size();
    vector<int> cnt(max_size, 0), l(max_size, 0), r(max_size, 0), sa(n, -1), lms, lms_ind(n, -1);
    vector<char> ls(n, 's');
    for(int i = n-1;i >= 0;i--){
        cnt[vec[i]]++;
        if(i == n-1)continue;
        if(vec[i] < vec[i+1])ls[i] = 's';
        else if(vec[i] > vec[i+1])ls[i] = 'l';
        else ls[i] = ls[i+1];
    }
    for(int i = 0;i < n;i++){
        if(ls[i] == 'l')continue;
        if(i == 0 || ls[i-1] == 'l'){
            lms.push_back(i);
            lms_ind[i] = 0;
        }
    }
    for(int i = 1;i < max_size;i++)cnt[i] += cnt[i-1];
    induced_sort(vec, max_size, cnt, sa, ls, lms, l, r);

    int last = -1;
    for(int i = 0;i < n;i++){
        int ind = sa[i];
        if(ls[ind] == 'l')continue;
        if(ind == 0 || ls[ind-1] == 'l'){
            if(last == -1)lms_ind[ind] = 0;
            else{
                int k = 1;
                while(ind + k < n && last + k < n && lms_ind[ind + k] < 0 && lms_ind[last + k] < 0 && vec[ind + k] == vec[last + k])k++;
                if(vec[last] == vec[ind] && (ind + k == n || lms_ind[ind + k] >= 0) && (last + k == n || lms_ind[last + k] >= 0))lms_ind[ind] = lms_ind[last];
                else lms_ind[ind] = lms_ind[last] + 1;
            }
            last = ind;
        }
    }
    vector<int> tmp;
    for(auto v:lms)tmp.push_back(lms_ind[v]);
    auto ord = suffix_array(tmp, lms_ind[last] + 1);
    vector<int> new_lms;
    for(int ind:ord){
        new_lms.push_back(lms[ind]);
    }
    induced_sort(vec, max_size, cnt, sa, ls, new_lms, l, r);
    return sa;
}