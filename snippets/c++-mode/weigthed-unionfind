# -*- mode: snippet -*-
# name: weighted-union-find
# key: /wuf
# group: DataStructure
# --

class WeightedUnionFind{
public:
  int n;
  vector<int> u;
  vector<Int> weight;
  WeightedUnionFind(int n = 0):n(n){
    u = vector<int>(n);
    weight = vector<Int>(n,0);
    for(int i = 0;i < n;i++)u[i] = i;
  }
  int r(int x){
    if(u[x] == x)return x;
    r(u[x]);
    weight[x] += weight[u[x]];
    return u[x] = r(u[x]);
  }

  Int dif(Int x, Int y){
    if(r(x) != r(y))return INF;
    return weight[x] - weight[y];
  }

  //x - y == w
  bool isOK(int x, int y, Int w){
    if(r(x) != r(y))return false;
    return dif(x,y) == w;
  }

  int unite(int x, int y, Int w){
    r(x);
    r(y);
    w += weight[y];
    w -= weight[x];
    x = r(x);
    y = r(y);
    u[x] = y;
    weight[x] = w;
  }
};
