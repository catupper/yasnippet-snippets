# -*- mode: snippet -*-
# name: Graph
# key: /graph
# group: DataStructure
# --


class Edge{
public:
  Int from, to, rev;
  Int cost, lim;
  Edge(Int from, Int to, Int cost, Int lim = -1, Int rev = -1):
    from(from),to(to),cost(cost),lim(lim),rev(rev){}
};


class Graph{
public:
  Int n;
  Int m;
  vector<vector<Edge>> edge;
  Graph(Int n = 0):n(n),m(0){
    edge = vector<vector<Edge>>(n);
  }
  void add_edge(Int from, Int to, Int cost = 1, Int lim = -1)
  {
    if(lim == -1){
      edge[from].push_back(Edge(from, to, cost));
      return;
    }
    edge[from].push_back(Edge(from, to, cost, lim, edge[to].size()));
    edge[to].push_back(Edge(to, from, -cost, 0, edge[from].size() - 1));
  }
};

$0